#!/usr/bin/ruby

# FOREGROUND COLOR
F_BLACK="\033[30m"
F_RED="\033[31m"
F_GREEN="\033[32m"
F_YELLOW="\033[33m"
F_BLUE="\033[34m"
F_MAGENTA="\033[35m"
F_CYAN="\033[36m"
F_WHITE="\033[37m"
# BACKGROUND COLOR
B_BLACK = "\033[40m"
B_RED = "\033[41m"
B_GREEN = "\033[42m"
B_YELLOW = "\033[43m"
B_BLUE = "\033[44m"
B_MAGENTA = "\033[45m"
B_CYAN = "\033[46m"
B_WHITE = "\033[47m"
CLOSE_COLOR="\033[0m"

require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'

options = OpenStruct.new
options.env = "production"
options.path = "/opt/sequreisp/deploy/current/"
options.cmd = ""
options.log_file = "log/production.log"

PATH_APP = "/opt/sequreisp/deploy/current/"

PLUGINS = (Dir.entries("#{PATH_APP}/vendor/plugins/") - [".", ".."]).select{|dir| dir.include?("sequreisp")}.sort

opts = OptionParser.new do |opts|

  opts.banner = "Usage: wispro [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-a", "--apply-changes", "Apply changes. Example: wispro -a") do
    options.cmd = "runner"
    options.extension = "Configuration.apply_changes"
  end

  # opts.on("-m", "--manual-apply-changes", "Manual apply changes. Example: wispro -m") do
  #   options.cmd = "runner"
  #   options.extension = "require 'sequreisp'; boot"
  # end

  opts.on("-z", "--safe-mode", "Active safe-mode. Example: wispro -z.") do
    options.cmd = "runner"
    options.extension = "conf = Configuration; conf.in_safe_mode = true; conf.save"
  end

  opts.on("-s", "--status", "Show Server's status. Example: wispro -s") do
    options.cmd = "runner"
    options.extension = "require '#{PATH_APP}script/display_status.rb'"
  end

  opts.on("-n", "--no-safe-mode", "Desactive safe-mode. Example: wispro -n.") do
    options.cmd = "runner"
    options.extension = "conf = Configuration; conf.in_safe_mode = false; conf.save"
  end

  opts.on("-t", "--tail FILE", "Show tail for production, command, command_human, daemon log. Example:
                                          wispro -t [production|command|command_human|command_server|DAEMON]") do |log_file|
    options.cmd = "tail"
    options.extension = "-n80 -F"
    daemon = log_file.scan(/(daemon_.*)/).flatten.first.to_s
    if not daemon.empty?
      options.path = "/opt/sequreisp/deploy/current/"
      options.log_file = "log/wispro.log | ccze -A | grep #{daemon}"
    else
      options.log_file = "log/#{log_file}.log | ccze -A"
    end
  end

  # opts.on("-l", "--log-level LEVEL", "grep log by level. Example: wispro -t daemon_<daemon_name> -l [info|debug]") do |level|
  #   puts level
  #   options.cmd = "tail"
  #   options.log_level = "| grep #{level.upcase}"
  # end

  # opts.on("-v", "--version", "Show version app. Example: wispro -v") do
  #   options.cmd = "runner"
  #   options.extension = "puts 'Version: ' + Configuration.app_version"
  # end

  opts.on("-c", "--console", "Open rails console. Example: wispro -c") do
    options.cmd = "console"
  end

  opts.on("-b", "--console-sandbox", "Open rails console in sandbox mode. WARNING you must used with option -c. Example: wispro -c -b.") do
    options.extension = "-s"
  end

  opts.on("-e", "--environment ENVIRONMENT", "Define environment by default use production. Example wispro -e [production|development|test]") do |env|
    options.env = env
    options.path = "." if env == "development"
  end

  opts.on_tail("-h", "--help", "Show this message") do
    show_help (opts)
    exit
  end

  opts.on("-d", "--debug-mode DAEMON", "Enable debug-mode for daemon log. Example:
                                          wispro -d DAEMON") do |daemon|
    change_daemon_attribute daemon, 'level_log', 0
  end

  opts.on("-i", "--info-mode DAEMON", "Enable info-mode for daemon log. Example:
                                          wispro -i DAEMON") do |daemon|
    change_daemon_attribute daemon, 'level_log', 1
  end

  opts.on("-w", "--enable-daemon DAEMON", "Enable daemon. Example:
                                          wispro -w DAEMON") do |daemon|
    change_daemon_attribute daemon, 'enabled', true
  end

  opts.on("-q", "--disable-daemon DAEMON", "Disable daemon. Example:
                                          wispro -q DAEMON") do |daemon|
    change_daemon_attribute daemon, 'enabled', false
  end

  def change_daemon_attribute daemons_input, attribute, value
    require 'yaml'
    daemons_input = `#{PATH_APP}script/runner -e production \"puts Configuration.daemons.join(',')\"` if daemons_input == "all"
    daemons = daemons_input.delete("\n").split(",")
    daemons.each do |daemon|
      root_path = PATH_APP
      plugin = daemon.sub('daemon_', '')
      plugin_dir = PLUGINS.select{|p| p.include?(plugin)}.first
      root_path += "vendor/plugins/#{plugin_dir}" if plugin_dir
      daemon_path = "#{root_path}/config/daemon_tasks.yml"
      daemon_config = YAML.load(File.read(daemon_path))
      daemon_config[daemon][attribute] = value
      File.open(daemon_path, 'w'){|l| l.puts daemon_config.to_yaml }
    end
  end

  ##########################################################
  #
  ##########################################################
end

def show_help opts
  puts "\nDAEMON = [daemon_invoicing|daemon_dyndns|daemon_synchronize_time|daemon_compact_samples|daemon_redis|daemon_check_bind|daemon_backup_restore|daemon_check_link|daemon_apply_change_automatically|daemon_apply_change|daemon_traffic_accounting|daemon_time_modifier|daemon_remote_backup|daemon_notification|daemon_network_monitoring|daemon_net_audit]"
  puts opts
end

if ARGV.empty?
  show_help opts
  ARGV << "-s"
end

opts.parse!

if options.cmd
  case options.cmd
  when "tail"
    exec("#{options.cmd} #{options.extension} #{options.path}#{options.log_file} #{options.log_level}")
  when "console"
    exec("#{options.path}script/#{options.cmd} #{options.env} #{options.extension}")
  when "runner"
    exec("#{options.path}script/#{options.cmd} -e #{options.env} \"#{options.extension}\"")
  end
end

